
++++++++++ SERVER ++++++++++
message to player on succesfull connections
{
    "type:" SUCCESSFUL_CONNECTION
    "id": #
}

++++++++++ REQUESTS ++++++++++

join request
{
    "type": "NEW_PLAYER",
    "name": std::string
    "id": #
}

play request
{
    "type": "play_request", 
    "unique_player_id": #, 
    "card": card_type
    //"color": "color"
}

draw request
{
    "type": "draw_request", 
    "unique_player_id": #, 
}

exit request
{
    "type": "exit_request", 
    "unique_player_id": #, 
}

++++++++++ RESPONDS ++++++++++

send cards
{
    "type": SEND_CARDS,
    "cards": [
        "id",
        "id",
        ...
        ]
}

update player state (shared information) (broadcast)
{
    "type": GAME_UPDATE,
    "players": [
        [
            "Player_id": #
            number_of_cards": #,
        ],
        [
            "Player_id": #
            "number_of_cards": #,
        ],
        ...
    ], 
    "current_player": 2, 
    "color_to_be_matched": yellow, 
    "top_card": yellow_0
}

error/ illegal move
{
    "type": "error",
    "msg": "..."
}
=======
++++++++++ SERVER ++++++++++
message to player on succesfull connections
{
    "type:" SUCCESSFUL_CONNECTION
    "id": #
}

internal message on connections
{
    "type": "NEW_PLAYER",
    "id": #
}

++++++++++ REQUESTS ++++++++++

play request
{
    "type": "PLAY_REQUEST",
    "id": #,
    "card": card_type
    //"color": "color"
}

draw request
{
    "type": "DRAW_REQUEST",
    "id": #,
}

exit request
{
    "type": "EXIT_REQUEST",
    "id": #,
}

select color request
{
    "type": "SELECT_COLOR"
}

++++++++++ RESPONDS ++++++++++

send_hand
{
    "type": SEND_HAND,
    "hand": [
        "id",
        "id",
        ...
        ]
}

update player state (shared information) (broadcast)
{
    "type": GAME_UPDATE,
    "players": [
        [
            "Player_id": #
            "Player_name": #
            number_of_cards": #,
        ],
        [
            "Player_id:" #
            "Player_name": #
            "number_of_cards": #,
        ],
        ...
    ], 
    "current_player": 2, 
    "color_to_be_matched": yellow, 
    "top_card": yellow_0
}

error/ illegal move
{
    "type": "ERROR",
    "msg": "..."
}

popup UNO
{
    "type": UNO
}

popup Game_Finished
{
    "type": START_NEW_GAME

}

popup Player has won
{
    "type": WINS
    "player_name": some_PLAYER_name
}

++++++++++++++++++++++++++++++Respond client side e.g. selected_color++++++++++++++++++++++++++++
selected color
{
    "type": "SELECTED_COLOR"
    "color": ck_Cards::Color
}

